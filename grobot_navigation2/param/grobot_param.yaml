amcl:
  ros__parameters:
    use_sim_time: False
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_footprint"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 4.0 #2.0
    laser_max_range: 100.0
    laser_min_range: -1.0
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "differential"
    save_pose_rate: 0.5
    sigma_hit: 0.1 # 0.2 -> 0.1
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.9 #0.5 -> 0.9
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    controller_plugins: ["FollowPath"]

    # DWB parameters
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.4 #0.22 -> 0.4
      max_vel_y: 0.0
      max_vel_theta: 0.2 #1.0 -> 0.15 -> 0.2 (0520)
      min_speed_xy: 0.0
      max_speed_xy: 0.4 #0.22 -> 0.4
      min_speed_theta: 0.0
      acc_lim_x: 1.0 # 2.5 -> 2.0 -> 1.0
      acc_lim_y: 0.0
      acc_lim_theta: 0.05 # 3.2 -> 0.07 ->0.05(0520)
      decel_lim_x: -1.0 #2.5 -> -1.0 
      decel_lim_y: 0.0
      decel_lim_theta: -0.05 # 3.2 -> 0.07 -> 0.05(0520)
      vx_samples: 20
      vy_samples: 0
      vtheta_samples: 40
      sim_time: 3.0 #1.5 -> 3.0 (0520)
      linear_granularity: 0.025 #0.05 -> 0.025 (0520)
      angular_granularity: 0.01 #0.025 -> 0.01 (0520)
      time_granularity: 0.025 #(0520)
      transform_tolerance: 0.2
      xy_goal_tolerance: 0.2 # 0.05 -> 0.1 (0519)
      yaw_goal_tolerance: 2.0  #(0520)
      # yaw_goal_tolerance: 0.1 #add 
      trans_stopped_velocity: 0.25
      short_circuit_trajectory_evaluation: True
      stateful: True
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 32.0
      GoalDist.scale: 24.0
      RotateToGoal.scale: 24.0 #32.0 -> 24.0
      RotateToGoal.slowing_factor: 15.0 #5.0 -> 15.0
      RotateToGoal.lookahead_time: -1.0

controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 10.0 #5.0 -> 10.0
      publish_frequency: 5.0 #2.0 -> 3.0 ->5.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 5
      height: 5
      resolution: 0.05
      # robot_radius: 0.1
      # footprint: "[[-1.3, -0.24], [-1.3, 0.24], [0.43, 0.3], [0.43, -0.3]]"
      footprint: "[[-1.3, -0.23], [-1.3, 0.23], [0.4, 0.3], [0.4, -0.3]]"
      footprint_padding: 0.1 #0.02 -> 0.01 -> 0.03 -> 0.1
      plugins: ["obstacle_layer", "voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 0.6 # 1.0 ->0.7 -> 0.3 ->0.4(0519)
        cost_scaling_factor: 2.0 #3.0 -> 2.0 (0520)
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          # obstacle_range: 2.5  # 동적 장애물 감지 범위 조정
          # raytrace_range: 3.0  # 장애물 제거를 위한 레이트레이싱 범위
          # observation_persistence: 0.001  # 장애물이 감지된 후 제거되기까지의 시간  
          data_type: "LaserScan"
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: lidar_cloud camera_cloud
        lidar_cloud:
          topic: /pointcloud_lidar
          max_obstacle_height: 2.0
          min_obstacle_height: 0.1
          clearing: True
          marking: True
          data_type: "PointCloud2"

        camera_cloud:
          topic: /processed_cloud
          max_obstacle_height: 2.0
          min_obstacle_height: -0.1
          clearing: True
          marking: True
          data_type: "PointCloud2"
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: False
      # footprint: "[[-1.4, -0.25], [-1.4, 0.25], [0.5, 0.3], [0.5, -0.3]]"
      footprint: "[[-1.3, -0.23], [-1.3, 0.23], [0.4, 0.3], [0.4, -0.3]]"
      footprint_padding: 0.02
      # robot_radius: 0.1
      resolution: 0.05
      plugins: ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: lidar_cloud camera_cloud
        lidar_cloud:
          topic: /pointcloud_lidar
          max_obstacle_height: 2.0
          min_obstacle_height: 0.1
          clearing: True
          marking: True
          data_type: "PointCloud2"
          
        camera_cloud:
          topic: /processed_cloud
          max_obstacle_height: 2.0
          min_obstacle_height: -0.1
          clearing: True
          marking: True
          data_type: "PointCloud2"
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.55
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "map0521.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5000
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false 
      allow_unknown: true

# planner_server:
#   ros__parameters:
#     planner_plugins: ["GridBased"]
#     expected_planner_frequency: 20.0
#     use_sim_time: False
#     GridBased:
#       plugin: "smac_planner/SmacPlanner"
#       tolerance: 0.5 # tolerance for planning if unable to reach exact pose, in meters, for 2D node
#       downsample_costmap: false # whether or not to downsample the map
#       downsampling_factor: 1 # multiplier for the resolution of the costmap layer (e.g. 2 on a 5cm costmap would be 10cm)
#       allow_unknown: true # allow traveling in unknown space
#       max_iterations: -1 # maximum total iterations to search for before failing
#       max_on_approach_iterations: 1000 # maximum number of iterations to attempt to reach goal once in tolerance, 2D only
#       max_planning_time_ms: 2000.0 # max time in ms for planner to plan, smooth, and upsample. Will scale maximum smoothing and upsampling times based on remaining time after planning.
#       smooth_path: true # Whether to smooth searched path
#       motion_model_for_search: "DUBIN" # 2D Moore, Von Neumann; SE2 Dubin, Redds-Shepp
#       angle_quantization_bins: 72 # For SE2 node: Number of angle bins for search, must be 1 for 2D node (no angle search)
#       minimum_turning_radius: 0.1 # For SE2 node & smoother: minimum turning radius in m of path / vehicle
#       reverse_penalty: 2.1 # For Reeds-Shepp model: penalty to apply if motion is reversing, must be => 1
#       change_penalty: 0.20 # For SE2 node: penalty to apply if motion is changing directions, must be >= 0
#       non_straight_penalty: 1.05 # For SE2 node: penalty to apply if motion is non-straight, must be => 1
#       #changed to completely avoid obstacles, may be better ways to prevent karts from colliding into obstacles
#       cost_penalty: 10.0 # For SE2 node: penalty to apply to higher cost zones

#       smoother:
#         smoother:
#           w_curve: 30.0                 # weight to minimize curvature of path
#           w_dist: 0.0                   # weight to bind path to original as optional replacement for cost weight
#           w_smooth: 50000.0             # weight to maximize smoothness of path
#           w_cost: 0.025                 # weight to steer robot away from collision and cost
#           cost_scaling_factor: 10.0     # this should match the inflation layer's parameter

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: False
    simulate_ahead_time: 2.0
    max_rotational_vel: 0.4 # 1.0 -> 0.4
    min_rotational_vel: 0.1 # 0.4 -> 0.2
    rotational_acc_lim: 0.7 # 3.2 -> 1.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 0